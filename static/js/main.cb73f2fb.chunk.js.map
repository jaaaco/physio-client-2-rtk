{"version":3,"sources":["features/flash/_redux.js","features/flash/index.js","features/patients/_redux.js","features/appointments/_redux.js","features/navigation/_redux.js","features/navigation/index.js","features/patients/list.js","features/validator/index.js","features/patients/edit.js","features/appointments/list.js","features/appointments/edit.js","features/appointments/details.js","features/patients/details.js","App.js","middlewares/flash.js","store.js","serviceWorker.js","index.js"],"names":["slice","createSlice","name","initialState","reducers","add","reducer","state","payload","remove","idToRemove","filter","id","actions","selectors","flash","Flash","flashes","useSelector","dispatch","useDispatch","types","info","label","icon","success","error","warning","className","map","type","text","Message","onDismiss","key","floating","Icon","Content","Header","db","PouchDb","keys","a","allDocs","include_docs","attachments","result","rows","row","doc","find","_id","patientLoader","DataLoader","destroy","createAsyncThunk","list","response","post","update","put","clear","details","get","set","editPatient","adapter","createEntityAdapter","sortComparer","b","surname","localeCompare","selectId","getInitialState","loading","current","undefined","reset","newPatient","addOne","updateOne","removeOne","extraReducers","pending","fulfilled","setAll","patients","getSelectors","plugin","PouchDbFind","patientId","selector","docs","load","patient","push","appointment","patientActions","editAppointment","console","visitDate","newAppointment","appointments","navigate","navigation","getComparedScansCount","Navigation","activeNavigation","comparedScansCount","Menu","data-cy","size","pointing","values","Item","active","_","indexOf","onClick","position","disabled","Input","placeholder","NavigationSwitch","_default","PatientList","selectAll","useEffect","length","Segment","Button","primary","ribbon","currentLetter","floated","as","Subheader","Table","singleLine","selectable","padded","Row","HeaderCell","Body","birthDate","comment","toUpperCase","Label","Cell","Validator","schema","this","data","errors","i","testResults","t","test","testResult","isObject","message","value","isFunction","validator","ValidatorMessage","Object","negative","PatientEdit","initValues","_rev","moment","isValid","useState","fields","setFields","handleChange","field","omit","handleSubmit","validate","isEmpty","Form","Grid","columns","divided","Column","width","fluid","onChange","__","Field","duration","closable","closeOnMouseLeave","clearable","dateFormat","localization","startMode","iconPosition","popupPosition","onClear","e","format","date","TextArea","Group","positive","Or","navigationActions","textAlign","AppointmentList","selectedPatient","patientSelectors","fixed","interview","verticalAlign","AppointmentEdit","autoFocus","AppointmentDetails","appointmentSelectors","busy","setBusy","Dropdown","options","trigger","Fragment","split","line","basic","PatientDetails","Container","appointmentActions","style","paddingTop","padding","margin","App","ADD_PATIENT","ADD_APPOINTMENT","PATIENT_DETAILS","APPOINTMENT_DETAILS","PATIENT","APPOINTMENT","nextId","messageMap","rejected","next","action","matches","match","setTimeout","module","verb","configureStore","middleware","getDefaultMiddleware","flashMiddleware","Boolean","window","location","hostname","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Cypress","resetApp"],"mappings":"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","file":"static/js/main.cb73f2fb.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst slice = createSlice({\n  name: 'flash',\n  initialState: [],\n  reducers: {\n    add: {\n      // prepare: payload => ({ payload: { ...payload, id: lastId++, duration: payload.duration || 3000 } }),\n      reducer: (state, { payload }) => [...state, payload]\n    },\n    remove (state, { payload: idToRemove }) {\n      return state.filter(({ id }) => id !== idToRemove)\n    }\n  }\n})\n\nexport const actions = slice.actions\n\nexport default slice.reducer\n\nexport const selectors = {\n  flashes: state => state.flash\n}\n","import React from 'react'\nimport { Icon, Message } from 'semantic-ui-react'\nimport './index.css'\nimport { selectors, actions } from './_redux'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Flash = () => {\n  const flashes = useSelector(selectors.flashes)\n  const dispatch = useDispatch()\n  if (!flashes) {\n    return null\n  }\n\n  const types = {\n    info: { label: 'Informacja', icon: 'info' },\n    success: { label: 'Sukces!', icon: 'check' },\n    error: { label: 'Błąd!', icon: 'times' },\n    warning: { label: 'Ostrzeżenie', icon: 'warning' }\n  }\n\n  return (\n    <div className=\"Flash\">\n      {flashes.map(({ id, type, text }) => (\n        <Message\n          onDismiss={\n            () => dispatch(actions.remove(id))\n          }\n          icon\n          key={id}\n          floating\n          {...{ [type]: true }}\n        >\n          <Icon name={types[type].icon} />\n          <Message.Content>\n            <Message.Header>{types[type].label}</Message.Header>\n            {text}\n          </Message.Content>\n        </Message>\n      ))}\n    </div>\n  )\n}\n\nexport default Flash\n","import {\n  createEntityAdapter,\n  createSlice,\n  createAsyncThunk\n} from '@reduxjs/toolkit'\nimport PouchDb from 'pouchdb'\nimport DataLoader from 'dataloader'\n\nconst db = new PouchDb('patients')\n\nasync function loadPatients (keys) {\n  const result = await db.allDocs({ include_docs: true, attachments: false, keys })\n  return keys.map(id => result.rows.map(row => row.doc).find(({ _id }) => id === _id))\n}\n\nexport const patientLoader = new DataLoader(loadPatients)\n\nconst destroy = createAsyncThunk(\n  'patients/destroy',\n  async () => db.destroy()\n)\n\nconst list = createAsyncThunk(\n  'patients/list',\n  async () => {\n    const response = await db.allDocs({\n      include_docs: true,\n      attachments: false\n    })\n    return response.rows.map(({ doc }) => doc)\n  }\n)\n\nconst add = createAsyncThunk(\n  'patients/add',\n  async payload => {\n    const { id } = await db.post(payload)\n    return { ...payload, _id: id }\n  }\n)\n\nconst update = createAsyncThunk(\n  'patients/update',\n  async payload => {\n    await db.put(payload)\n    patientLoader.clear(payload._id)\n    return payload\n  }\n)\n\nconst details = createAsyncThunk(\n  'patients/details',\n  async id => {\n    return db.get(id, {\n      attachments: false\n    })\n  }\n)\n\nconst set = createAsyncThunk(\n  'patients/set',\n  async id => {\n    return db.get(id, {\n      attachments: false\n    })\n  }\n)\n\nconst editPatient = createAsyncThunk(\n  'patients/edit',\n  async id => {\n    return db.get(id, {\n      attachments: false\n    })\n  }\n)\n\nconst remove = createAsyncThunk(\n  'patients/remove',\n  async payload => {\n    patientLoader.clear(payload._id)\n    return db.remove(payload)\n  }\n)\n\nconst adapter = createEntityAdapter({\n  sortComparer: (a, b) => a.surname.localeCompare(b.surname),\n  selectId: ({ _id }) => _id\n})\n\nconst slice = createSlice({\n  name: 'patients',\n  initialState: adapter.getInitialState({\n    loading: false,\n    current: undefined,\n    error: null\n  }),\n  reducers: {\n    reset: state => { state.current = undefined },\n    newPatient: state => { state.current = undefined },\n    add: adapter.addOne,\n    update: adapter.updateOne,\n    remove: adapter.removeOne\n  },\n  extraReducers: {\n    [list.pending]: state => {\n      state.loading = true\n    },\n    [list.fulfilled]: (state, { payload }) => {\n      adapter.setAll(state, payload)\n      state.loading = false\n      state.current = undefined\n    },\n    [details.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [details.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [editPatient.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [editPatient.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [add.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [set.fulfilled]: (state, { payload }) => { state.current = payload },\n    [update.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [remove.fulfilled]: (state, { payload }) => {\n      state.current = undefined\n    }\n  }\n})\n\nconst { newPatient, reset } = slice.actions\n// export named actions + thunk-generated actions\nexport const actions = { reset, set, update, add, remove, list, details, editPatient, newPatient, destroy }\n\nexport const selectors = {\n  current: state => state.patients.current,\n  loading: state => state.patients.loading,\n  ...adapter.getSelectors(state => state.patients)\n}\n\nexport default slice.reducer\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit'\nimport PouchDb from 'pouchdb'\nimport PouchDbFind from 'pouchdb-find'\nimport { patientLoader, actions as patientActions } from '../patients/_redux'\n\nPouchDb.plugin(PouchDbFind)\n\nconst db = new PouchDb('appointments')\n\nconst list = createAsyncThunk(\n  'appointments/list',\n  async ({ patientId }) => {\n    const response = await db.find({\n      selector: {\n        patientId\n      }\n    })\n\n    if (patientId) {\n      return response.docs\n    }\n\n    const result = []\n    for (const doc of response.docs) {\n      result.push({ ...doc, patient: await patientLoader.load(doc.patientId) })\n    }\n    return result\n  }\n)\n\nconst add = createAsyncThunk(\n  'appointments/add',\n  async payload => {\n    const { id } = await db.post(payload)\n    return { ...payload, _id: id }\n  }\n)\n\nconst update = createAsyncThunk(\n  'appointments/update',\n  async payload => {\n    await db.put(payload)\n    return payload\n  }\n)\n\nconst details = createAsyncThunk(\n  'appointments/details',\n  async (id, { dispatch }) => {\n    const appointment = await db.get(id, {\n      attachments: false\n    })\n    dispatch(patientActions.set(appointment.patientId))\n    return appointment\n  }\n)\n\nconst editAppointment = createAsyncThunk(\n  'appointments/edit',\n  async id => {\n    return db.get(id, {\n      attachments: false\n    })\n  }\n)\n\nconst remove = createAsyncThunk(\n  'appointments/remove',\n  async payload => {\n    return db.remove(payload)\n  }\n)\n\nconst adapter = createEntityAdapter({\n  sortComparer: (a, b) => {\n    console.info({ a, b })\n    return b.visitDate.localeCompare(a.visitDate)\n  },\n  selectId: ({ _id }) => _id\n})\n\nconst slice = createSlice({\n  name: 'appointments',\n  initialState: adapter.getInitialState({\n    loading: false,\n    current: undefined,\n    error: null\n  }),\n  reducers: {\n    newAppointment: state => { state.current = undefined },\n    add: adapter.addOne,\n    update: adapter.updateOne,\n    remove: adapter.removeOne\n  },\n  extraReducers: {\n    [list.pending]: state => {\n      state.loading = true\n    },\n    [list.fulfilled]: (state, { payload }) => {\n      adapter.setAll(state, payload)\n      state.loading = false\n    },\n    [details.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [details.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [editAppointment.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [editAppointment.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [add.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [update.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [remove.fulfilled]: (state, { payload }) => {\n      state.current = undefined\n    }\n  }\n})\n\nconst { newAppointment } = slice.actions\n// export named actions + thunk-generated actions\nexport const actions = { update, add, remove, list, details, editAppointment, newAppointment }\n\nexport const selectors = {\n  current: state => state.appointments.current,\n  loading: state => state.appointments.loading,\n  ...adapter.getSelectors(state => state.appointments)\n}\n\nexport default slice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { actions as patients } from '../patients/_redux'\nimport { actions as appointments } from '../appointments/_redux'\n\nconst slice = createSlice({\n  name: 'navigation',\n  initialState: 'PATIENT',\n  reducers: {\n    navigate (state, { payload: screen }) {\n      return screen\n    }\n  },\n  extraReducers: {\n    [patients.newPatient]: () => 'ADD_PATIENT',\n    [appointments.newAppointment]: () => 'ADD_APPOINTMENT',\n    [patients.editPatient.fulfilled]: () => 'ADD_PATIENT',\n    [appointments.editAppointment.fulfilled]: () => 'ADD_APPOINTMENT',\n    [patients.remove.fulfilled]: () => 'PATIENT',\n    [appointments.remove.fulfilled]: () => 'PATIENT_DETAILS',\n    [patients.update.fulfilled]: () => 'PATIENT_DETAILS',\n    [appointments.update.fulfilled]: () => 'APPOINTMENT_DETAILS',\n    [patients.add.fulfilled]: () => 'PATIENT_DETAILS',\n    [appointments.add.fulfilled]: () => 'APPOINTMENT_DETAILS',\n    [appointments.details.pending]: () => 'APPOINTMENT_DETAILS',\n    [patients.list.fulfilled]: () => 'PATIENT',\n    [patients.details.pending]: () => 'PATIENT_DETAILS'\n  }\n})\n\nconst {\n  navigate\n} = slice.actions\n\nexport const actions = { navigate }\n\nexport const selectors = {\n  getNavigation: state => state.navigation\n}\n\nexport default slice.reducer\n","import React from 'react'\nimport { Input, Menu } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions, selectors } from './_redux'\nimport { actions as patientActions } from '../patients/_redux'\n\nconst getComparedScansCount = () => 0\n\nconst Navigation = () => {\n  const activeNavigation = useSelector(selectors.getNavigation)\n  const comparedScansCount = useSelector(getComparedScansCount)\n  const dispatch = useDispatch()\n  const items = [\n    {\n      name: 'Pacjenci',\n      values: ['PATIENT', 'EDIT_PATIENT']\n    },\n    { name: 'Wizyty', values: ['APPOINTMENT'] },\n    { name: 'Ustawienia', values: ['SETTINGS'] }\n  ]\n\n  return (\n    <Menu data-cy=\"navigation\" size=\"massive\" pointing>\n      {items.map(({ name, values }) => (\n        <Menu.Item\n          data-cy={`top-navigation-${values[0]}`}\n          key={name}\n          name={name}\n          active={_.indexOf(values, activeNavigation) !== -1}\n          onClick={() => {\n            dispatch(patientActions.reset())\n            dispatch(actions.navigate(values[0]))\n          }}\n        />\n      ))}\n      <Menu.Menu position=\"right\">\n        <Menu.Item\n          disabled={!comparedScansCount}\n          name={`Porównaj (${comparedScansCount})`}\n          onClick={() => dispatch(actions.navigate('COMPARE'))}\n        />\n        <Menu.Item>\n          <Input icon=\"search\" placeholder=\"Szukaj...\" />\n        </Menu.Item>\n      </Menu.Menu>\n    </Menu>\n  )\n}\n\nconst NavigationSwitch = ({ map }) => {\n  const navigation = useSelector(selectors.getNavigation)\n  if (map[navigation]) {\n    return map[navigation]\n  }\n  return map._default || null\n}\n\nexport { Navigation, NavigationSwitch }\n","import React, { useEffect } from 'react'\nimport { Label, Table, Button, Header, Icon, Segment } from 'semantic-ui-react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { actions, selectors } from './_redux'\n\nconst PatientList = () => {\n  const dispatch = useDispatch()\n  const patients = useSelector(selectors.selectAll)\n  const loading = useSelector(selectors.loading)\n\n  useEffect(() => {\n    dispatch(actions.list())\n  }, [dispatch])\n\n  if (!patients.length) {\n    return (\n      <Segment placeholder loading={loading}>\n        <Header icon>\n          <Icon name=\"user md\" />\n          Jeszcze nie zarejestrowano żadnego pacjenta\n        </Header>\n        <Button\n          data-cy=\"new-patient-hero\"\n          primary\n          onClick={() => dispatch(actions.newPatient())}\n        >\n          <Icon name=\"add user\" /> Dodaj pacjenta\n        </Button>\n      </Segment>\n    )\n  }\n\n  let currentLetter = ''\n  let ribbon\n\n  return (\n    <>\n      <Button\n        data-cy=\"new-patient\"\n        floated=\"right\"\n        primary\n        onClick={() => dispatch(actions.newPatient())}\n      >\n        <Icon name=\"add user\" /> Dodaj pacjenta\n      </Button>\n      <Header as=\"h2\">\n        <Icon name=\"group\" />\n        <Header.Content>\n          Pacjenci\n          <Header.Subheader>{patients.length} rekordów</Header.Subheader>\n        </Header.Content>\n      </Header>\n      <Table singleLine selectable padded>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Imię i Nazwisko</Table.HeaderCell>\n            <Table.HeaderCell>Data urodzenia</Table.HeaderCell>\n            <Table.HeaderCell>Inne informacje</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {patients.map(({ _id, name, surname, birthDate, comment }) => {\n            if (surname && currentLetter !== surname[0].toUpperCase()) {\n              currentLetter = surname[0].toUpperCase()\n              ribbon = <Label ribbon>{surname[0].toUpperCase()}</Label>\n            } else {\n              ribbon = null\n            }\n            return (\n              <Table.Row\n                data-cy=\"data-name-cell\"\n                onClick={() => dispatch(actions.details(_id))}\n                key={_id}\n              >\n                <Table.Cell>\n                  {ribbon}\n                  <span>\n                    {name} {surname}\n                  </span>\n                </Table.Cell>\n                <Table.Cell>{birthDate}</Table.Cell>\n                <Table.Cell>{comment}</Table.Cell>\n              </Table.Row>\n            )\n          })}\n        </Table.Body>\n      </Table>\n    </>\n  )\n}\n\nexport default PatientList\n","import { Message } from 'semantic-ui-react'\nimport React from 'react'\nimport _ from 'lodash'\nimport validator from 'validator'\n\nclass Validator {\n  constructor (schema) {\n    this.schema = schema\n  }\n\n  async validate (data) {\n    const errors = {}\n    const keys = _.keys(this.schema)\n    for (let i = 0; i < keys.length; i++) {\n      const testResults = []\n      for (let t = 0; t < this.schema[keys[i]].length; t++) {\n        const testResult = await this.test(\n          this.schema[keys[i]][t].test,\n          data[keys[i]],\n          data\n        )\n        if (!testResult || (_.isObject(testResult) && !testResult.result)) {\n          testResults.push(\n            _.isObject(testResult) && testResult.message\n              ? testResult.message\n              : this.schema[keys[i]][t].message\n          )\n        }\n      }\n      if (testResults.length) {\n        errors[keys[i]] = testResults[0]\n      }\n    }\n    return errors\n  }\n\n  async test (\n    test,\n    value,\n    data\n  ) {\n    if (_.isFunction(test)) {\n      const result = await test(value, data)\n      return result\n    }\n    return (validator[test])(value)\n  }\n}\n\nconst ValidatorMessage = ({ errors }) => (\n  <>\n    {!!Object.keys(errors).length && (\n      <Message negative>\n        <Message.Header data-cy=\"validation-error-message\">\n          Formularz zawiera błędy\n        </Message.Header>\n        <ul>\n          {Object.values(errors).map((error, key) => (\n            <li key={key}>{error}</li>\n          ))}\n        </ul>\n      </Message>\n    )}\n  </>\n)\n\nexport { Validator, ValidatorMessage }\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Grid, Form, Button, Icon } from 'semantic-ui-react'\nimport { DateInput } from 'semantic-ui-calendar-react'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport { ValidatorMessage, Validator } from '../validator'\n\nimport {\n  actions,\n  selectors\n} from './_redux'\n\nimport {\n  actions as navigationActions\n} from '../navigation/_redux'\n\nconst PatientEdit = () => {\n  const dispatch = useDispatch()\n  const patient = useSelector(selectors.current)\n  let initValues = {\n    name: '',\n    surname: '',\n    birthDate: '',\n    comment: ''\n  }\n  let _id = ''\n  let _rev = ''\n\n  if (patient !== undefined) {\n    ({ _id, _rev, ...initValues } = patient)\n  }\n\n  const validator = new Validator({\n    name: [\n      {\n        test: value => value.length > 1,\n        message: 'Imię musi mieć przynajmniej dwa znaki'\n      }\n    ],\n    surname: [\n      {\n        test: value => value.length > 1,\n        message: 'Nazwisko musi mieć przynajmniej dwa znaki'\n      }\n    ],\n    birthDate: [\n      {\n        test: value => value === '' || moment(value, 'YYYY-MM-DD').isValid(),\n        message: 'Wpisz poprawną datę'\n      }\n    ]\n  })\n\n  const [fields, setFields] = useState({\n    errors: {},\n    values: initValues\n  })\n\n  useEffect(() => {\n    setFields({ errors: {}, values: patient || initValues })\n  }, [patient])\n  const handleChange = async (field, value) => {\n    setFields(state => ({\n      values: { ...state.values, [field]: value },\n      errors: { ..._.omit(state.errors, [field]) }\n    }))\n  }\n\n  const handleSubmit = async () => {\n    const errors = await validator.validate(fields.values)\n    if (!_.isEmpty(errors)) {\n      setFields(state => ({\n        values: { ...state.values },\n        errors\n      }))\n      return\n    }\n    dispatch(\n      patient === undefined\n        ? actions.add(fields.values)\n        : actions.update({ _id, _rev, ...fields.values })\n    )\n  }\n\n  return (\n    <Form>\n      <Grid columns=\"3\">\n        <Grid.Row divided>\n          <Grid.Column width=\"6\">\n            <Form.Input\n              error={!!fields.errors.name}\n              data-cy=\"first_name\"\n              value={fields.values.name}\n              fluid\n              label=\"Imię\"\n              placeholder=\"Imię\"\n              onChange={(__, data) => handleChange('name', data.value)}\n            />\n          </Grid.Column>\n          <Grid.Column width=\"5\">\n            <Form.Input\n              error={!!fields.errors.surname}\n              data-cy=\"last_name\"\n              value={fields.values.surname}\n              fluid\n              label=\"Nazwisko\"\n              placeholder=\"Nazwisko\"\n              onChange={(__, data) => handleChange('surname', data.value)}\n            />\n          </Grid.Column>\n          <Grid.Column width=\"5\">\n            <Form.Field error={!!fields.errors.birthDate}>\n              <label>Data urodzenia</label>\n              <DateInput\n                duration={0}\n                closable\n                closeOnMouseLeave\n                clearable\n                dateFormat=\"YYYY-MM-DD\"\n                localization=\"pl\"\n                startMode=\"year\"\n                name=\"birthDate\"\n                placeholder=\"Data urodzenia\"\n                value={fields.values.birthDate}\n                iconPosition=\"right\"\n                popupPosition=\"bottom right\"\n                onClear={() => handleChange('birthDate', '')}\n                onChange={(e, { value, format }) => {\n                  if (value) {\n                    const date = moment(value, format)\n                    if (date.isValid()) {\n                      handleChange('birthDate', date.format('YYYY-MM-DD'))\n                    } else {\n                      handleChange('birthDate', '')\n                    }\n                  }\n                }}\n              />\n            </Form.Field>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Column width=\"10\">\n          <Form.TextArea\n            data-cy=\"description\"\n            value={fields.values.comment}\n            label=\"Inne informacje\"\n            placeholder=\"Inne informacje\"\n            onChange={(__, data) => handleChange('comment', `${data.value}`)}\n          />\n        </Grid.Column>\n      </Grid>\n      <ValidatorMessage errors={fields.errors} />\n      <Grid>\n        <Grid.Row columns=\"2\">\n          <Grid.Column>\n            <Button.Group>\n              <Button\n                data-cy=\"patient-save-button\"\n                onClick={handleSubmit}\n                positive\n              >\n                Zapisz\n              </Button>\n              <Button.Or text=\"lub\" />\n              <Button\n                data-cy=\"patient-cancel-button\"\n                onClick={() => dispatch(navigationActions.navigate('PATIENT'))}\n              >\n                Anuluj\n              </Button>\n            </Button.Group>\n          </Grid.Column>\n          {patient && (\n            <Grid.Column textAlign=\"right\">\n              <Button\n                data-cy=\"patient-delete-button\"\n                negative\n                onClick={() => {\n                  dispatch(actions.remove(patient))\n                }}\n              >\n                <Icon name=\"trash\" /> Usuń\n              </Button>\n            </Grid.Column>\n          )}\n        </Grid.Row>\n      </Grid>\n    </Form>\n  )\n}\n\nexport default PatientEdit\n","import React, { useEffect } from 'react'\nimport { Header, Icon, Segment, Table } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { actions, selectors } from './_redux'\n\nimport { selectors as patientSelectors } from '../patients/_redux'\n\nconst AppointmentList = () => {\n  const dispatch = useDispatch()\n  const selectedPatient = useSelector(patientSelectors.current)\n  const appointments = useSelector(selectors.selectAll)\n\n  useEffect(() => {\n    dispatch(actions.list({ patientId: selectedPatient?._id }))\n  }, [dispatch, selectedPatient])\n\n  if (!appointments.length) {\n    return (\n      <Segment placeholder>\n        <Header icon>\n          <Icon name=\"user md\" />\n          Jeszcze nie zarejestrowano żadnej wizyty\n        </Header>\n      </Segment>\n    )\n  }\n\n  return (\n    <>\n      {!selectedPatient && (\n        <Header as=\"h2\">\n          <Icon name=\"group\" />\n          <Header.Content>\n            Wizyty\n            <Header.Subheader>{appointments.length} rekordów</Header.Subheader>\n          </Header.Content>\n        </Header>\n      )}\n      <Table data-cy=\"appointment-list\" padded selectable fixed>\n        <Table.Header>\n          <Table.Row>\n            {!selectedPatient && <Table.HeaderCell>Pacjent</Table.HeaderCell>}\n            <Table.HeaderCell width={5}>Data i godzina wizyty</Table.HeaderCell>\n            <Table.HeaderCell width={7}>Inne informacje</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {appointments.map(\n            ({ _id, interview, visitDate, patient }) => (\n              <Table.Row\n                onClick={() => {\n                  dispatch(actions.details(_id))\n                }}\n                key={_id}\n              >\n                {!selectedPatient && (\n                  <Table.Cell verticalAlign=\"top\">\n                    {patient && `${patient.name} ${patient.surname}`}\n                  </Table.Cell>\n                )}\n                <Table.Cell verticalAlign=\"top\">\n                  {visitDate}\n                </Table.Cell>\n                <Table.Cell>{interview}</Table.Cell>\n              </Table.Row>\n            )\n          )}\n        </Table.Body>\n      </Table>\n    </>\n  )\n}\n\nexport default AppointmentList\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Grid, Form, Button, Icon, Header } from 'semantic-ui-react'\nimport { DateTimeInput } from 'semantic-ui-calendar-react'\nimport moment from 'moment'\n\nimport { selectors, actions } from './_redux'\nimport { actions as patientActions, selectors as patientSelectors } from '../patients/_redux'\n\nconst AppointmentEdit = () => {\n  const dispatch = useDispatch()\n  const appointment = useSelector(selectors.current)\n  const patient = useSelector(patientSelectors.current)\n  const dateFormat = 'YYYY-MM-DD @ HH:mm'\n\n  let initValues = {\n    patientId: patient._id,\n    interview: '',\n    visitDate: moment().format(dateFormat)\n  }\n  let _id = ''\n  let _rev = ''\n\n  if (appointment !== undefined) {\n    ({ _id, _rev, ...initValues } = appointment)\n  }\n\n  const [fields, setFields] = useState({\n    values: initValues\n  })\n\n  const handleChange = async (field, value) => {\n    setFields(state => ({\n      values: { ...state.values, [field]: value }\n    }))\n  }\n\n  const handleSubmit = async () =>\n    dispatch(\n      appointment === undefined\n        ? actions.add(fields.values)\n        : actions.update({ _id, _rev, ...fields.values })\n    )\n\n  return (\n    <>\n      {patient && (\n        <Header as=\"h2\">\n          <Icon name=\"user circle\" />\n          <Header.Content>\n            {patient.name} {patient.surname}\n            <Header.Subheader>Nowa wizyta</Header.Subheader>\n          </Header.Content>\n        </Header>\n      )}\n      <Form>\n        <Form.Field>\n          <label>Data wizyty</label>\n          <DateTimeInput\n            duration={0}\n            name=\"visitDate\"\n            closable\n            closeOnMouseLeave\n            dateFormat={dateFormat}\n            localization=\"pl\"\n            placeholder=\"Data wizyty\"\n            value={fields.values.visitDate}\n            iconPosition=\"right\"\n            popupPosition=\"bottom right\"\n            onChange={(e, { value }) => {\n              if (value) {\n                const date = moment(value, 'YYYY-MM-DD @ HH:mm')\n                if (date.isValid()) {\n                  handleChange('visitDate', date.format(dateFormat))\n                } else {\n                  handleChange('visitDate', '')\n                }\n              }\n            }}\n          />\n        </Form.Field>\n        <Form.TextArea\n          autoFocus\n          data-cy=\"description\"\n          value={fields.values.interview}\n          label=\"Inne informacje\"\n          placeholder=\"Inne informacje\"\n          onChange={(_, data) => handleChange('interview', `${data.value}`)}\n        />\n        <Grid>\n          <Grid.Row columns=\"2\">\n            <Grid.Column>\n              <Button.Group>\n                <Button data-cy=\"appointment-save-button\" onClick={handleSubmit} positive>\n                  Zapisz\n                </Button>\n                <Button.Or text=\"lub\" />\n                <Button data-cy=\"appointment-cancel\" onClick={() => dispatch(patientActions.details(patient._id))}>\n                  Anuluj\n                </Button>\n              </Button.Group>\n            </Grid.Column>\n            <Grid.Column textAlign=\"right\">\n              {appointment && (\n                <Button\n                  negative\n                  onClick={() => {\n                    dispatch(actions.remove(appointment))\n                  }}\n                >\n                  <Icon name=\"trash\" /> Usuń\n                </Button>\n              )}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Form>\n    </>\n  )\n}\n\nexport default AppointmentEdit\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Dropdown, Header, Icon, Segment } from 'semantic-ui-react'\nimport { actions, selectors as appointmentSelectors } from './_redux'\n\nimport { actions as patientActions, selectors as patientSelectors } from '../patients/_redux'\n\n// import Scanner from '../../lib/scanner'\n// import ScanList from '../Scan/ScanList'\n\nconst AppointmentDetails = () => {\n  const patient = useSelector(patientSelectors.current)\n  const appointment = useSelector(appointmentSelectors.current)\n  const dispatch = useDispatch()\n  const [busy, setBusy] = useState(false)\n  const scans = [] // useSelector(getScansWithPatients)\n  const serverHost = 'localhost' // useSelector(getSettingByKey)('serverHost')\n\n  useEffect(() => {\n    // dispatch(actions.list())\n    // dispatch(loadSettingsRequest())\n  }, [dispatch])\n\n  if (!patient || !appointment) {\n    return null\n  }\n\n  return (\n    <>\n      <Button.Group floated=\"right\">\n        <Button\n          disabled={busy}\n          primary\n          onClick={() => {\n            setBusy(true)\n            // const scanner = new Scanner({ serverHost })\n            // TODO: Add fake progressbar here for 15 sec.\n            // scanner.scan((error: any, data: any) => {\n            // TODO: Hide progressbar here\n            // setBusy(false)\n            // dispatch(\n            //   createRequest('scans', {\n            //     comment: '',\n            //     order: scans.length + 1,\n            //     appointmentId: appointment._id,\n            //     patientId: patient._id,\n            //     mesh: data,\n            //     date: moment().format('YYYY-MM-DD @ HH:mm')\n            //   })\n            // )\n            // })\n          }}\n        >\n          <Icon name=\"video camera\" />\n          Nowe badanie\n        </Button>\n        <Dropdown\n          data-cy=\"dropdown\"\n          onChange={() => {\n            dispatch(actions.editAppointment(appointment._id))\n          }}\n          className=\"button icon\"\n          options={[\n            { key: 'edit', icon: 'edit', text: 'Modyfikuj', value: 'edit' }\n          ]}\n          trigger={<React.Fragment />}\n        />\n      </Button.Group>\n      <Header as=\"h2\">\n        <Icon name=\"user circle\" />\n        <Header.Content data-cy=\"appointment-details\">\n          Wizyta {appointment.visitDate}\n          <Header.Subheader>\n            {patient.name} {patient.surname}\n          </Header.Subheader>\n        </Header.Content>\n      </Header>\n      <Segment data-cy=\"appointment-description\">\n        {appointment.interview.split('\\n').map((line, key) => (\n          <p key={key}>{line}</p>\n        ))}\n      </Segment>\n      {/* <ScanList /> */}\n      <Button data-cy=\"navigate-back\" onClick={() => dispatch(patientActions.details(patient._id))} basic>\n        <Icon name=\"arrow left\" /> wróć do szczegółów pacjenta\n      </Button>\n    </>\n  )\n}\n\nexport default AppointmentDetails\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  Container,\n  Grid,\n  Button,\n  Dropdown,\n  Header,\n  Icon,\n  Segment\n} from 'semantic-ui-react'\nimport { actions, selectors } from './_redux'\nimport { actions as appointmentActions } from '../appointments/_redux'\nimport { AppointmentList } from '../appointments'\n\nconst PatientDetails = () => {\n  const patient = useSelector(selectors.current)\n  const dispatch = useDispatch()\n\n  if (!patient) {\n    return null\n  }\n\n  return (\n    <Container>\n      <Grid columns=\"equal\">\n        <Grid.Row>\n          <Grid.Column>\n            <Header as=\"h2\">\n              <Icon name=\"user circle\" />\n              <Header.Content data-cy=\"patient-header-content\">\n                {patient.name} {patient.surname}\n                <Header.Subheader>Szczegóły Pacjenta</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Grid.Column>\n          <Grid.Column>\n            <Button.Group\n              primary\n              floated=\"right\"\n              onClick={() => dispatch(appointmentActions.newAppointment())}\n            >\n              <Button primary data-cy=\"new-appointment\">\n                <Icon name=\"add to calendar\" />\n                Nowa wizyta\n              </Button>\n              <Dropdown\n                floating\n                data-cy=\"dropdown-button-icon\"\n                onChange={() => {\n                  dispatch(actions.editPatient(patient._id))\n                }}\n                className=\"button icon\"\n                options={[\n                  {\n                    key: 'edit',\n                    icon: 'edit',\n                    text: 'Modyfikuj',\n                    value: 'edit'\n                  }\n                ]}\n                trigger={<React.Fragment />}\n              />\n            </Button.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Grid divided style={{ paddingTop: '0.5em' }}>\n        <Grid.Row>\n          <Grid.Column width={7} style={{ padding: '0 2em 3em 0' }}>\n            <p>\n              <strong>Data urodzenia: </strong>\n              {patient.birthDate}\n            </p>\n            <p>\n              <strong>Ostatnia wizyta: </strong>24.05.2017\n            </p>\n            <Header as=\"h4\">Inne informacje:</Header>\n            <Segment>\n              {patient.comment.split('\\n').map((line, key) => (\n                <p key={key}>{line}</p>\n              ))}\n            </Segment>\n            <Header as=\"h3\" style={{ margin: '2em 0 1em 0' }}>\n              Ostatnie wizyty\n            </Header>\n            <AppointmentList />\n          </Grid.Column>\n          <Grid.Column width={9} style={{ padding: '0 0 3em 2em' }}>\n            <Header as=\"h4\">Ostatnie badanie - 02.02.2017, 09:00</Header>\n            <Segment>\n              // TODO: last scan here\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Button\n        data-cy=\"back-button\"\n        onClick={() => dispatch(actions.list())}\n        basic\n      >\n        <Icon name=\"arrow left\" /> Wróć\n      </Button>\n    </Container>\n  )\n}\n\nexport default PatientDetails\n","import React from 'react'\n\nimport Flash from './features/flash'\nimport { Navigation, NavigationSwitch } from './features/navigation'\nimport { PatientDetails, PatientEdit, PatientList } from './features/patients'\nimport { AppointmentDetails, AppointmentEdit, AppointmentList } from './features/appointments'\n\nconst App = () => (\n  <>\n    <Navigation />\n    <div style={{ margin: '2em' }}>\n      <NavigationSwitch map={{\n        ADD_PATIENT: <PatientEdit />,\n        ADD_APPOINTMENT: <AppointmentEdit />,\n        PATIENT_DETAILS: <PatientDetails />,\n        APPOINTMENT_DETAILS: <AppointmentDetails />,\n        PATIENT: <PatientList />,\n        APPOINTMENT: <AppointmentList />,\n        _default: <p>_default</p>\n      }} />\n    </div>\n    <Flash />\n  </>\n)\n\nexport default App\n","import { actions } from '../features/flash/_redux'\n\nlet nextId = 1\nconst duration = 3000\n\nconst messageMap = {\n  fulfilled: {\n    type: 'success',\n    add: 'Nowy wpis został zapisany',\n    update: 'Zmiany zostały zapisane',\n    remove: 'Wpis został usunięty',\n    patients: {\n      add: 'Dane nowego pacjenta zostały zapisane'\n    }\n  },\n  rejected: {\n    type: 'error',\n    add: 'Nie udało się zapisać danych',\n    update: 'Nie udało się zapisać zmian',\n    remove: 'Nie udało się usunąć wpisu',\n    list: 'Nie udało się pobrać listy'\n  }\n}\n\nconst flash = ({ dispatch }) => next => async action => {\n  const matches = action.type.match(/^([a-z]+)\\/([a-z]+)\\/([a-z]+)$/)\n\n  if (!matches) {\n    return next(action)\n  }\n\n  const add = (text, type = 'success') => {\n    dispatch(actions.add({ id: nextId, type, text }))\n    setTimeout(id => {\n      dispatch(actions.remove(id))\n    }, duration, nextId)\n    nextId++\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  const [_, module, verb, result] = matches\n\n  if (messageMap[result]?.[module]?.[verb]) {\n    add(messageMap[result][module][verb], messageMap[result].type)\n  } else if (messageMap[result]?.[verb]) {\n    add(messageMap[result][verb], messageMap[result].type)\n  }\n\n  return next(action)\n}\n\nexport default flash\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport navigation from './features/navigation/_redux'\nimport patients from './features/patients/_redux'\nimport appointments from './features/appointments/_redux'\nimport flash from './features/flash/_redux'\nimport flashMiddleware from './middlewares/flash'\n\nexport default configureStore({\n  reducer: {\n    navigation,\n    patients,\n    appointments,\n    flash\n  },\n  middleware: [...getDefaultMiddleware(), flashMiddleware]\n})\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport store from './store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport PouchDb from 'pouchdb'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n// expose store when run in Cypress\nif (window.Cypress) {\n  window.resetApp = async function () {\n    const patients = new PouchDb('patients')\n    await patients.destroy()\n\n    const appointments = new PouchDb('appointments')\n    await appointments.destroy()\n  }\n}\n"],"sourceRoot":""}