{"version":3,"sources":["features/flash/_redux.js","features/flash/index.js","features/scans/_redux.js","features/appointments/_redux.js","features/patients/_redux.js","features/navigation/_redux.js","features/compare/_redux.js","features/compare/counter.js","features/scans/view.js","features/scans/load.js","features/compare/page.js","features/navigation/index.js","features/patients/list.js","features/validator/index.js","features/patients/edit.js","features/appointments/list.js","features/appointments/edit.js","features/settings/_redux.js","middlewares/flash.js","features/scans/button.js","features/scans/list.js","features/appointments/details.js","features/scans/comment.js","features/scans/details.js","features/patients/details.js","features/settings/index.js","App.js","store.js","serviceWorker.js","index.js"],"names":["slice","createSlice","name","initialState","reducers","add","reducer","state","payload","remove","idToRemove","filter","id","actions","selectors","flash","Flash","flashes","useSelector","dispatch","useDispatch","types","info","label","icon","success","error","warning","className","map","type","text","Message","onDismiss","key","floating","Icon","Content","Header","PouchDb","plugin","PouchDbFind","db","createIndex","index","fields","list","createAsyncThunk","a","appointmentId","patientId","find","sort","order","selector","$exists","response","docs","doc_count","moment","format","date","omit","newScan","post","rev","putAttachment","Blob","mesh","_id","update","put","details","get","attachments","scan","console","load","getLastScan","limit","lastScan","editScan","adapter","createEntityAdapter","selectId","getInitialState","loading","current","undefined","loadedScans","addOne","updateOne","removeOne","extraReducers","pending","fulfilled","setAll","scans","getSelectors","result","doc","patientLoader","patient","push","appointment","patientActions","set","getLastAppointment","visitDate","lastAppointment","editAppointment","sortComparer","b","localeCompare","newAppointment","appointments","keys","allDocs","include_docs","rows","row","DataLoader","destroy","clear","editPatient","surname","reset","newPatient","patients","navigate","navigation","items","union","without","compare","length","CompareCounter","comparedScansCount","Menu","Item","disabled","onClick","ScanView","Segment","style","height","Dimmer","active","Loader","base64","binaryString","window","atob","len","bytes","Uint8Array","i","charCodeAt","buffer","base64ToArrayBuffer","_attachments","data","ScanLoad","scanId","useEffect","ComparePage","Button","data-cy","floated","negative","as","Subheader","Grid","columns","GridColumn","e","stopPropagation","placeholder","Navigation","activeNavigation","size","pointing","values","_","indexOf","position","Input","NavigationSwitch","_default","PatientList","selectAll","primary","ribbon","currentLetter","Table","singleLine","selectable","padded","Row","HeaderCell","Body","birthDate","comment","toUpperCase","Label","Cell","Validator","schema","this","errors","testResults","t","test","testResult","isObject","message","value","isFunction","validator","ValidatorMessage","Object","PatientEdit","initValues","_rev","isValid","useState","setFields","handleChange","field","handleSubmit","validate","isEmpty","Form","divided","Column","width","fluid","onChange","__","Field","duration","closable","closeOnMouseLeave","clearable","dateFormat","localization","startMode","iconPosition","popupPosition","onClear","TextArea","Group","positive","Or","navigationActions","textAlign","AppointmentList","selectedPatient","patientSelectors","fixed","interview","verticalAlign","AppointmentEdit","autoFocus","all","serverHost","serverPort","clone","rejected","settings","nextId","messageMap","next","action","matches","match","setTimeout","module","verb","ScanButton","onScanComplete","status","setStatus","scannerController","ScannerController","getStatus","then","arduino_ready","isArray","forEach","msg","prepareStandardScanId","checking","ready","busy","ScanList","selectedAppointment","appointmentSelectors","comparedScans","compareSelectors","isCompared","truncate","separator","compareActions","AppointmentDetails","scanAcions","Dropdown","options","trigger","split","line","basic","ScanComment","changed","setChanged","StanDetails","Container","exportLink","document","createElement","appointmentActions","href","download","click","keg","Divider","section","PatientDetails","paddingTop","padding","margin","SettingsEdit","Settings","App","ADD_PATIENT","ADD_APPOINTMENT","PATIENT_DETAILS","APPOINTMENT_DETAILS","SCAN_DETAILS","COMPARE","PATIENT","APPOINTMENT","SETTINGS","configureStore","middleware","getDefaultMiddleware","flashMiddleware","Boolean","location","hostname","ReactDOM","render","store","getElementById","navigator","serviceWorker","registration","unregister","Cypress","resetApp"],"mappings":"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","file":"static/js/main.e04655a5.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst slice = createSlice({\n  name: 'flash',\n  initialState: [],\n  reducers: {\n    add: {\n      // prepare: payload => ({ payload: { ...payload, id: lastId++, duration: payload.duration || 3000 } }),\n      reducer: (state, { payload }) => [...state, payload]\n    },\n    remove (state, { payload: idToRemove }) {\n      return state.filter(({ id }) => id !== idToRemove)\n    }\n  }\n})\n\nexport const actions = slice.actions\n\nexport default slice.reducer\n\nexport const selectors = {\n  flashes: state => state.flash\n}\n","import React from 'react'\nimport { Icon, Message } from 'semantic-ui-react'\nimport './index.css'\nimport { selectors, actions } from './_redux'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst Flash = () => {\n  const flashes = useSelector(selectors.flashes)\n  const dispatch = useDispatch()\n  if (!flashes) {\n    return null\n  }\n\n  const types = {\n    info: { label: 'Informacja', icon: 'info' },\n    success: { label: 'Sukces!', icon: 'check' },\n    error: { label: 'Błąd!', icon: 'times' },\n    warning: { label: 'Ostrzeżenie', icon: 'warning' }\n  }\n\n  return (\n    <div className=\"Flash\">\n      {flashes.map(({ id, type, text }) => (\n        <Message\n          onDismiss={\n            () => dispatch(actions.remove(id))\n          }\n          icon\n          key={id}\n          floating\n          {...{ [type]: true }}\n        >\n          <Icon name={types[type].icon} />\n          <Message.Content>\n            <Message.Header>{types[type].label}</Message.Header>\n            {text}\n          </Message.Content>\n        </Message>\n      ))}\n    </div>\n  )\n}\n\nexport default Flash\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit'\nimport PouchDb from 'pouchdb'\nimport PouchDbFind from 'pouchdb-find'\nimport moment from 'moment'\nimport omit from 'lodash/omit'\n\nPouchDb.plugin(PouchDbFind)\n\nconst db = new PouchDb('scans')\n\ndb.createIndex({ index: { fields: ['order'] } })\ndb.createIndex({ index: { fields: ['patientId'] } })\n\nconst list = createAsyncThunk(\n  'scans/list',\n  async ({ appointmentId, patientId }) => {\n    const response = await db.find({\n      sort: [{ order: 'desc' }],\n      selector: appointmentId ? {\n        patientId,\n        appointmentId,\n        order: { $exists: true }\n      } : {\n        patientId,\n        order: { $exists: true }\n      }\n    })\n    return response.docs\n  }\n)\n\nconst add = createAsyncThunk(\n  'scans/add',\n  async payload => {\n    const newScan = {\n      order: (await db.info()).doc_count,\n      date: moment().format('YYYY-MM-DD @ HH:mm'),\n      ...omit(payload, ['mesh'])\n    }\n    const { id, rev } = await db.post(newScan)\n    await db.putAttachment(\n      id,\n      'scan.ply',\n      rev,\n      // eslint-disable-next-line no-undef\n      new Blob([payload.mesh], { type: 'application/octet-stream' }),\n      'application/octet-stream'\n    )\n\n    return {\n      ...newScan,\n      _id: id\n    }\n  }\n)\n\nconst update = createAsyncThunk(\n  'scans/update',\n  async payload => {\n    await db.put(payload)\n    return payload\n  }\n)\n\nconst details = createAsyncThunk(\n  'scans/details',\n  async (id, { dispatch }) => {\n    try {\n      const scan = await db.get(id, {\n        attachments: true\n      })\n      return scan\n    } catch (e) {\n      console.error(e)\n    }\n  }\n)\n\nconst load = createAsyncThunk(\n  'scans/load',\n  async (id, { dispatch }) => {\n    try {\n      const scan = await db.get(id, {\n        attachments: true\n      })\n      return scan\n    } catch (e) {\n      console.error(e)\n    }\n  }\n)\n\nexport async function getLastScan (patientId) {\n  const lastScan = await db.find({\n    limit: 1,\n    sort: [{ order: 'desc' }],\n    selector: {\n      patientId,\n      order: { $exists: true }\n    }\n  })\n  if (lastScan.docs[0]) {\n    return db.get(lastScan.docs[0]._id, {\n      attachments: true\n    })\n  }\n  return null\n}\n\nconst editScan = createAsyncThunk(\n  'scans/edit',\n  async id => {\n    return db.get(id, {\n      attachments: false\n    })\n  }\n)\n\nconst remove = createAsyncThunk(\n  'scans/remove',\n  async payload => {\n    return db.remove(payload)\n  }\n)\n\nconst adapter = createEntityAdapter({\n  selectId: ({ _id }) => _id\n})\n\nconst slice = createSlice({\n  name: 'scans',\n  initialState: adapter.getInitialState({\n    loading: false,\n    current: undefined,\n    error: null,\n    loadedScans: {}\n  }),\n  reducers: {\n    add: adapter.addOne,\n    update: adapter.updateOne,\n    remove: adapter.removeOne\n  },\n  extraReducers: {\n    [list.pending]: state => {\n      state.loading = true\n    },\n    [list.fulfilled]: (state, { payload }) => {\n      adapter.setAll(state, payload)\n      state.loading = false\n    },\n    [details.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [load.pending]: state => {\n      state.loading = true\n    },\n    [load.fulfilled]: (state, { payload }) => {\n      console.info({ payload })\n      state.loadedScans[payload._id] = payload\n      state.loading = false\n    },\n    [details.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [editScan.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [editScan.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [add.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [update.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [remove.fulfilled]: state => {\n      state.current = undefined\n    }\n  }\n})\n\nexport const actions = { update, add, remove, list, details, editScan, load }\n\nexport const selectors = {\n  current: state => state.scans.current,\n  loading: state => state.scans.loading,\n  ...adapter.getSelectors(state => state.scans),\n  loadedScans: state => state.scans.loadedScans\n}\n\nexport default slice.reducer\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit'\nimport PouchDb from 'pouchdb'\nimport PouchDbFind from 'pouchdb-find'\nimport { patientLoader, actions as patientActions } from '../patients/_redux'\n\nPouchDb.plugin(PouchDbFind)\n\nconst db = new PouchDb('appointments')\n\ndb.createIndex({ index: { fields: ['visitDate'] } })\ndb.createIndex({ index: { fields: ['patientId'] } })\n\nconst list = createAsyncThunk(\n  'appointments/list',\n  async ({ patientId }) => {\n    const response = await db.find({\n      selector: {\n        patientId\n      }\n    })\n\n    if (patientId) {\n      return response.docs\n    }\n\n    const result = []\n    for (const doc of response.docs) {\n      result.push({ ...doc, patient: await patientLoader.load(doc.patientId) })\n    }\n    return result\n  }\n)\n\nconst add = createAsyncThunk(\n  'appointments/add',\n  async payload => {\n    const { id } = await db.post(payload)\n    return { ...payload, _id: id }\n  }\n)\n\nconst update = createAsyncThunk(\n  'appointments/update',\n  async payload => {\n    await db.put(payload)\n    return payload\n  }\n)\n\nconst details = createAsyncThunk(\n  'appointments/details',\n  async (id, { dispatch }) => {\n    const appointment = await db.get(id, {\n      attachments: false\n    })\n    dispatch(patientActions.set(appointment.patientId))\n    return appointment\n  }\n)\n\nexport async function getLastAppointment (patientId) {\n  try {\n    const lastAppointment = await db.find({\n      sort: [{ visitDate: 'desc' }],\n      limit: 1,\n      selector: {\n        patientId,\n        visitDate: { $exists: true }\n      }\n    })\n    console.info(lastAppointment)\n    return lastAppointment.docs[0] || null\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nconst editAppointment = createAsyncThunk(\n  'appointments/edit',\n  async id => {\n    return db.get(id, {\n      attachments: false\n    })\n  }\n)\n\nconst remove = createAsyncThunk(\n  'appointments/remove',\n  async payload => {\n    return db.remove(payload)\n  }\n)\n\nconst adapter = createEntityAdapter({\n  sortComparer: (a, b) => {\n    return b.visitDate.localeCompare(a.visitDate)\n  },\n  selectId: ({ _id }) => _id\n})\n\nconst slice = createSlice({\n  name: 'appointments',\n  initialState: adapter.getInitialState({\n    loading: false,\n    current: undefined,\n    error: null\n  }),\n  reducers: {\n    newAppointment: state => { state.current = undefined },\n    add: adapter.addOne,\n    update: adapter.updateOne,\n    remove: adapter.removeOne\n  },\n  extraReducers: {\n    [list.pending]: state => {\n      state.loading = true\n    },\n    [list.fulfilled]: (state, { payload }) => {\n      adapter.setAll(state, payload)\n      state.loading = false\n    },\n    [details.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [details.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [editAppointment.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [editAppointment.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [add.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [update.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [remove.fulfilled]: (state, { payload }) => {\n      state.current = undefined\n    }\n  }\n})\n\nconst { newAppointment } = slice.actions\n// export named actions + thunk-generated actions\nexport const actions = { update, add, remove, list, details, editAppointment, newAppointment }\n\nexport const selectors = {\n  current: state => state.appointments.current,\n  loading: state => state.appointments.loading,\n  ...adapter.getSelectors(state => state.appointments)\n}\n\nexport default slice.reducer\n","import {\n  createEntityAdapter,\n  createSlice,\n  createAsyncThunk\n} from '@reduxjs/toolkit'\nimport PouchDb from 'pouchdb'\nimport DataLoader from 'dataloader'\nimport { getLastScan } from '../scans/_redux'\nimport { getLastAppointment } from '../appointments/_redux'\n\nconst db = new PouchDb('patients')\n\nasync function loadPatients (keys) {\n  const result = await db.allDocs({ include_docs: true, attachments: false, keys })\n  return keys.map(id => result.rows.map(row => row.doc).find(({ _id }) => id === _id))\n}\n\nexport const patientLoader = new DataLoader(loadPatients)\n\nconst destroy = createAsyncThunk(\n  'patients/destroy',\n  async () => db.destroy()\n)\n\nconst list = createAsyncThunk(\n  'patients/list',\n  async () => {\n    const response = await db.allDocs({\n      include_docs: true,\n      attachments: false\n    })\n    return response.rows.map(({ doc }) => doc)\n  }\n)\n\nconst add = createAsyncThunk(\n  'patients/add',\n  async payload => {\n    const { id } = await db.post(payload)\n    return { ...payload, _id: id }\n  }\n)\n\nconst update = createAsyncThunk(\n  'patients/update',\n  async payload => {\n    await db.put(payload)\n    patientLoader.clear(payload._id)\n    return payload\n  }\n)\n\nconst details = createAsyncThunk(\n  'patients/details',\n  async id => {\n    const doc = await db.get(id, {\n      attachments: false\n    })\n    return { ...doc, lastAppointment: await getLastAppointment(id), lastScan: await getLastScan(id) }\n  }\n)\n\nconst set = createAsyncThunk(\n  'patients/set',\n  async id => {\n    return db.get(id, {\n      attachments: false\n    })\n  }\n)\n\nconst editPatient = createAsyncThunk(\n  'patients/edit',\n  async id => {\n    return db.get(id, {\n      attachments: false\n    })\n  }\n)\n\nconst remove = createAsyncThunk(\n  'patients/remove',\n  async payload => {\n    patientLoader.clear(payload._id)\n    return db.remove(payload)\n  }\n)\n\nconst adapter = createEntityAdapter({\n  sortComparer: (a, b) => a.surname.localeCompare(b.surname),\n  selectId: ({ _id }) => _id\n})\n\nconst slice = createSlice({\n  name: 'patients',\n  initialState: adapter.getInitialState({\n    loading: false,\n    current: undefined,\n    error: null\n  }),\n  reducers: {\n    reset: state => { state.current = undefined },\n    newPatient: state => { state.current = undefined },\n    add: adapter.addOne,\n    update: adapter.updateOne,\n    remove: adapter.removeOne\n  },\n  extraReducers: {\n    [list.pending]: state => {\n      state.loading = true\n    },\n    [list.fulfilled]: (state, { payload }) => {\n      adapter.setAll(state, payload)\n      state.loading = false\n      state.current = undefined\n    },\n    [details.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [details.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [editPatient.pending]: state => {\n      state.current = undefined\n      state.loading = true\n    },\n    [editPatient.fulfilled]: (state, { payload }) => {\n      state.current = payload\n      state.loading = false\n    },\n    [add.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [set.fulfilled]: (state, { payload }) => { state.current = payload },\n    [update.fulfilled]: (state, { payload }) => {\n      state.current = payload\n    },\n    [remove.fulfilled]: (state, { payload }) => {\n      state.current = undefined\n    }\n  }\n})\n\nconst { newPatient, reset } = slice.actions\n// export named actions + thunk-generated actions\nexport const actions = { reset, set, update, add, remove, list, details, editPatient, newPatient, destroy }\n\nexport const selectors = {\n  current: state => state.patients.current,\n  loading: state => state.patients.loading,\n  ...adapter.getSelectors(state => state.patients)\n}\n\nexport default slice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport { actions as patients } from '../patients/_redux'\nimport { actions as appointments } from '../appointments/_redux'\nimport { actions as scans } from '../scans/_redux'\n\nconst slice = createSlice({\n  name: 'navigation',\n  initialState: 'PATIENT',\n  reducers: {\n    navigate (state, { payload: screen }) {\n      return screen\n    }\n  },\n  extraReducers: {\n    [patients.newPatient]: () => 'ADD_PATIENT',\n    [appointments.newAppointment]: () => 'ADD_APPOINTMENT',\n    [patients.editPatient.fulfilled]: () => 'ADD_PATIENT',\n    [appointments.editAppointment.fulfilled]: () => 'ADD_APPOINTMENT',\n    [patients.remove.fulfilled]: () => 'PATIENT',\n    [appointments.remove.fulfilled]: () => 'PATIENT_DETAILS',\n    [patients.update.fulfilled]: () => 'PATIENT_DETAILS',\n    [appointments.update.fulfilled]: () => 'APPOINTMENT_DETAILS',\n    [patients.add.fulfilled]: () => 'PATIENT_DETAILS',\n    [appointments.add.fulfilled]: () => 'APPOINTMENT_DETAILS',\n    [appointments.details.pending]: () => 'APPOINTMENT_DETAILS',\n    [patients.list.fulfilled]: () => 'PATIENT',\n    [patients.details.pending]: () => 'PATIENT_DETAILS',\n    [scans.details.pending]: () => 'SCAN_DETAILS'\n  }\n})\n\nconst {\n  navigate\n} = slice.actions\n\nexport const actions = { navigate }\n\nexport const selectors = {\n  getNavigation: state => state.navigation\n}\n\nexport default slice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\nimport union from 'lodash/union'\nimport without from 'lodash/without'\n\nconst slice = createSlice({\n  name: 'compare',\n  initialState: {\n    items: []\n  },\n  reducers: {\n    add: (state, { payload }) => {\n      state.items = union(state.items, [payload])\n    },\n    remove: (state, { payload }) => {\n      state.items = without(state.items, payload)\n    },\n    clear: (state, { payload }) => {\n      state.items = []\n    }\n  }\n})\n\nexport const actions = slice.actions\n\nexport const selectors = {\n  selectAll: state => state.compare.items,\n  count: state => state.compare.items.length\n}\n\nexport default slice.reducer\n","import { actions } from '../navigation/_redux'\nimport { Menu } from 'semantic-ui-react'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectors } from './_redux'\n\nconst CompareCounter = () => {\n  const comparedScansCount = useSelector(selectors.count)\n  const dispatch = useDispatch()\n  return (\n    <Menu.Item\n      disabled={!comparedScansCount}\n      name={`Porównaj (${comparedScansCount})`}\n      onClick={() => dispatch(actions.navigate('COMPARE'))}\n    />\n  )\n}\n\nexport default CompareCounter\n","import React from 'react'\nimport { MeshViewer } from '@dev3dbody/mesh-viewer'\nimport { Dimmer, Loader, Segment } from 'semantic-ui-react'\n\nconst ScanView = ({ loading, scan }) => {\n  if (loading || !scan) {\n    return (\n      <Segment style={{ height: '730px' }}>\n        <Dimmer active>\n          <Loader />\n        </Dimmer>\n      </Segment>\n    )\n  }\n\n  function base64ToArrayBuffer (base64) {\n    var binaryString = window.atob(base64)\n    var len = binaryString.length\n    var bytes = new Uint8Array(len)\n    for (var i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i)\n    }\n    return bytes.buffer\n  }\n\n  return (\n    <Segment>\n      <MeshViewer mesh={base64ToArrayBuffer(scan._attachments['scan.ply'].data)} />\n    </Segment>\n  )\n}\n\nexport default ScanView\n","import React, { useEffect } from 'react'\nimport ScanView from './view'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions, selectors } from './_redux'\n\nconst ScanLoad = ({ scanId }) => {\n  const dispatch = useDispatch()\n  const loadedScans = useSelector(selectors.loadedScans)\n  const loading = useSelector(selectors.loading)\n  useEffect(() => {\n    dispatch(actions.load(scanId))\n  }, [dispatch, scanId])\n\n  if (!scanId) {\n    return null\n  }\n\n  return (\n    <ScanView loading={loading} scan={loadedScans[scanId]} />\n  )\n}\n\nexport default ScanLoad\n","import React from 'react'\nimport { Segment, Grid, GridColumn, Button, Header, Icon } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions, selectors } from './_redux'\nimport { MeshViewerGroup } from '@dev3dbody/mesh-viewer'\nimport ScanLoad from '../scans/load'\n\nconst ComparePage = () => {\n  const dispatch = useDispatch()\n  const scans = useSelector(selectors.selectAll)\n\n  if (!scans.length) {\n    return (\n      <Segment placeholder>\n        <Header icon>\n          <Icon name='search' />\n          Lista skanów do porównania jest pusta.\n        </Header>\n      </Segment>\n    )\n  }\n\n  return (\n    <>\n      {scans.length > 0 &&\n        <Button\n          data-cy='new-patient'\n          floated='right'\n          negative\n          onClick={() => dispatch(actions.clear())}\n        >\n          <Icon name='trash' /> Wyczyść wszystkie\n        </Button>\n      }\n      <Header as='h2'>\n        <Icon name='group' />\n        <Header.Content>\n          Porównanie badań\n          <Header.Subheader>Zsynchronizowane</Header.Subheader>\n        </Header.Content>\n      </Header>\n      <MeshViewerGroup>\n        <Grid columns='3'>\n          {scans.map(scanId => (\n            <GridColumn key={scanId}>\n              <ScanLoad scanId={scanId} />\n              <Button\n                negative\n                onClick={e => {\n                  e.stopPropagation()\n                  dispatch(actions.remove(scanId))\n                }}\n              >\n                <Icon name='trash' />\n                Usuń z porównania\n              </Button>\n            </GridColumn>\n          ))}\n        </Grid>\n      </MeshViewerGroup>\n    </>\n  )\n}\n\nexport default ComparePage\n","import React from 'react'\nimport { Input, Menu } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions, selectors } from './_redux'\nimport { actions as patientActions } from '../patients/_redux'\nimport { CompareCounter } from '../compare'\n\nconst Navigation = () => {\n  const activeNavigation = useSelector(selectors.getNavigation)\n  const dispatch = useDispatch()\n\n  const items = [\n    {\n      name: 'Pacjenci',\n      values: ['PATIENT', 'EDIT_PATIENT']\n    },\n    { name: 'Wizyty', values: ['APPOINTMENT'] },\n    { name: 'Ustawienia', values: ['SETTINGS'] }\n  ]\n\n  return (\n    <Menu data-cy='navigation' size='massive' pointing>\n      {items.map(({ name, values }) => (\n        <Menu.Item\n          data-cy={`top-navigation-${values[0]}`}\n          key={name}\n          name={name}\n          active={_.indexOf(values, activeNavigation) !== -1}\n          onClick={() => {\n            dispatch(patientActions.reset())\n            dispatch(actions.navigate(values[0]))\n          }}\n        />\n      ))}\n      <Menu.Menu position='right'>\n        <CompareCounter />\n        <Menu.Item>\n          <Input icon='search' placeholder='Szukaj...' />\n        </Menu.Item>\n      </Menu.Menu>\n    </Menu>\n  )\n}\n\nconst NavigationSwitch = ({ map }) => {\n  const navigation = useSelector(selectors.getNavigation)\n  if (map[navigation]) {\n    return map[navigation]\n  }\n  return map._default || null\n}\n\nexport { Navigation, NavigationSwitch }\n","import React, { useEffect } from 'react'\nimport { Label, Table, Button, Header, Icon, Segment } from 'semantic-ui-react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { actions, selectors } from './_redux'\n\nconst PatientList = () => {\n  const dispatch = useDispatch()\n  const patients = useSelector(selectors.selectAll)\n  const loading = useSelector(selectors.loading)\n\n  useEffect(() => {\n    dispatch(actions.list())\n  }, [dispatch])\n\n  if (!patients.length) {\n    return (\n      <Segment placeholder loading={loading}>\n        <Header icon>\n          <Icon name=\"user md\" />\n          Jeszcze nie zarejestrowano żadnego pacjenta\n        </Header>\n        <Button\n          data-cy=\"new-patient-hero\"\n          primary\n          onClick={() => dispatch(actions.newPatient())}\n        >\n          <Icon name=\"add user\" /> Dodaj pacjenta\n        </Button>\n      </Segment>\n    )\n  }\n\n  let currentLetter = ''\n  let ribbon\n\n  return (\n    <>\n      <Button\n        data-cy=\"new-patient\"\n        floated=\"right\"\n        primary\n        onClick={() => dispatch(actions.newPatient())}\n      >\n        <Icon name=\"add user\" /> Dodaj pacjenta\n      </Button>\n      <Header as=\"h2\">\n        <Icon name=\"group\" />\n        <Header.Content>\n          Pacjenci\n          <Header.Subheader>{patients.length} rekordów</Header.Subheader>\n        </Header.Content>\n      </Header>\n      <Table singleLine selectable padded>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Imię i Nazwisko</Table.HeaderCell>\n            <Table.HeaderCell>Data urodzenia</Table.HeaderCell>\n            <Table.HeaderCell>Inne informacje</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {patients.map(({ _id, name, surname, birthDate, comment }) => {\n            if (surname && currentLetter !== surname[0].toUpperCase()) {\n              currentLetter = surname[0].toUpperCase()\n              ribbon = <Label ribbon>{surname[0].toUpperCase()}</Label>\n            } else {\n              ribbon = null\n            }\n            return (\n              <Table.Row\n                data-cy=\"data-name-cell\"\n                onClick={() => dispatch(actions.details(_id))}\n                key={_id}\n              >\n                <Table.Cell>\n                  {ribbon}\n                  <span>\n                    {name} {surname}\n                  </span>\n                </Table.Cell>\n                <Table.Cell>{birthDate}</Table.Cell>\n                <Table.Cell>{comment}</Table.Cell>\n              </Table.Row>\n            )\n          })}\n        </Table.Body>\n      </Table>\n    </>\n  )\n}\n\nexport default PatientList\n","import { Message } from 'semantic-ui-react'\nimport React from 'react'\nimport _ from 'lodash'\nimport validator from 'validator'\n\nclass Validator {\n  constructor (schema) {\n    this.schema = schema\n  }\n\n  async validate (data) {\n    const errors = {}\n    const keys = _.keys(this.schema)\n    for (let i = 0; i < keys.length; i++) {\n      const testResults = []\n      for (let t = 0; t < this.schema[keys[i]].length; t++) {\n        const testResult = await this.test(\n          this.schema[keys[i]][t].test,\n          data[keys[i]],\n          data\n        )\n        if (!testResult || (_.isObject(testResult) && !testResult.result)) {\n          testResults.push(\n            _.isObject(testResult) && testResult.message\n              ? testResult.message\n              : this.schema[keys[i]][t].message\n          )\n        }\n      }\n      if (testResults.length) {\n        errors[keys[i]] = testResults[0]\n      }\n    }\n    return errors\n  }\n\n  async test (\n    test,\n    value,\n    data\n  ) {\n    if (_.isFunction(test)) {\n      const result = await test(value, data)\n      return result\n    }\n    return (validator[test])(value)\n  }\n}\n\nconst ValidatorMessage = ({ errors }) => (\n  <>\n    {!!Object.keys(errors).length && (\n      <Message negative>\n        <Message.Header data-cy=\"validation-error-message\">\n          Formularz zawiera błędy\n        </Message.Header>\n        <ul>\n          {Object.values(errors).map((error, key) => (\n            <li key={key}>{error}</li>\n          ))}\n        </ul>\n      </Message>\n    )}\n  </>\n)\n\nexport { Validator, ValidatorMessage }\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Grid, Form, Button, Icon } from 'semantic-ui-react'\nimport { DateInput } from 'semantic-ui-calendar-react'\nimport _ from 'lodash'\nimport moment from 'moment'\nimport { ValidatorMessage, Validator } from '../validator'\n\nimport {\n  actions,\n  selectors\n} from './_redux'\n\nimport {\n  actions as navigationActions\n} from '../navigation/_redux'\n\nconst PatientEdit = () => {\n  const dispatch = useDispatch()\n  const patient = useSelector(selectors.current)\n  let initValues = {\n    name: '',\n    surname: '',\n    birthDate: '',\n    comment: ''\n  }\n  let _id = ''\n  let _rev = ''\n\n  if (patient !== undefined) {\n    ({ _id, _rev, ...initValues } = patient)\n  }\n\n  const validator = new Validator({\n    name: [\n      {\n        test: value => value.length > 1,\n        message: 'Imię musi mieć przynajmniej dwa znaki'\n      }\n    ],\n    surname: [\n      {\n        test: value => value.length > 1,\n        message: 'Nazwisko musi mieć przynajmniej dwa znaki'\n      }\n    ],\n    birthDate: [\n      {\n        test: value => value === '' || moment(value, 'YYYY-MM-DD').isValid(),\n        message: 'Wpisz poprawną datę'\n      }\n    ]\n  })\n\n  const [fields, setFields] = useState({\n    errors: {},\n    values: initValues\n  })\n\n  useEffect(() => {\n    setFields({ errors: {}, values: patient || initValues })\n  }, [patient])\n  const handleChange = async (field, value) => {\n    setFields(state => ({\n      values: { ...state.values, [field]: value },\n      errors: { ..._.omit(state.errors, [field]) }\n    }))\n  }\n\n  const handleSubmit = async () => {\n    const errors = await validator.validate(fields.values)\n    if (!_.isEmpty(errors)) {\n      setFields(state => ({\n        values: { ...state.values },\n        errors\n      }))\n      return\n    }\n    dispatch(\n      patient === undefined\n        ? actions.add(fields.values)\n        : actions.update({ _id, _rev, ...fields.values })\n    )\n  }\n\n  return (\n    <Form>\n      <Grid columns=\"3\">\n        <Grid.Row divided>\n          <Grid.Column width=\"6\">\n            <Form.Input\n              error={!!fields.errors.name}\n              data-cy=\"first_name\"\n              value={fields.values.name}\n              fluid\n              label=\"Imię\"\n              placeholder=\"Imię\"\n              onChange={(__, data) => handleChange('name', data.value)}\n            />\n          </Grid.Column>\n          <Grid.Column width=\"5\">\n            <Form.Input\n              error={!!fields.errors.surname}\n              data-cy=\"last_name\"\n              value={fields.values.surname}\n              fluid\n              label=\"Nazwisko\"\n              placeholder=\"Nazwisko\"\n              onChange={(__, data) => handleChange('surname', data.value)}\n            />\n          </Grid.Column>\n          <Grid.Column width=\"5\">\n            <Form.Field error={!!fields.errors.birthDate}>\n              <label>Data urodzenia</label>\n              <DateInput\n                duration={0}\n                closable\n                closeOnMouseLeave\n                clearable\n                dateFormat=\"YYYY-MM-DD\"\n                localization=\"pl\"\n                startMode=\"year\"\n                name=\"birthDate\"\n                placeholder=\"Data urodzenia\"\n                value={fields.values.birthDate}\n                iconPosition=\"right\"\n                popupPosition=\"bottom right\"\n                onClear={() => handleChange('birthDate', '')}\n                onChange={(e, { value, format }) => {\n                  if (value) {\n                    const date = moment(value, format)\n                    if (date.isValid()) {\n                      handleChange('birthDate', date.format('YYYY-MM-DD'))\n                    } else {\n                      handleChange('birthDate', '')\n                    }\n                  }\n                }}\n              />\n            </Form.Field>\n          </Grid.Column>\n        </Grid.Row>\n        <Grid.Column width=\"10\">\n          <Form.TextArea\n            data-cy=\"description\"\n            value={fields.values.comment}\n            label=\"Inne informacje\"\n            placeholder=\"Inne informacje\"\n            onChange={(__, data) => handleChange('comment', `${data.value}`)}\n          />\n        </Grid.Column>\n      </Grid>\n      <ValidatorMessage errors={fields.errors} />\n      <Grid>\n        <Grid.Row columns=\"2\">\n          <Grid.Column>\n            <Button.Group>\n              <Button\n                data-cy=\"patient-save-button\"\n                onClick={handleSubmit}\n                positive\n              >\n                Zapisz\n              </Button>\n              <Button.Or text=\"lub\" />\n              <Button\n                data-cy=\"patient-cancel-button\"\n                onClick={() => dispatch(navigationActions.navigate('PATIENT'))}\n              >\n                Anuluj\n              </Button>\n            </Button.Group>\n          </Grid.Column>\n          {patient && (\n            <Grid.Column textAlign=\"right\">\n              <Button\n                data-cy=\"patient-delete-button\"\n                negative\n                onClick={() => {\n                  dispatch(actions.remove(patient))\n                }}\n              >\n                <Icon name=\"trash\" /> Usuń\n              </Button>\n            </Grid.Column>\n          )}\n        </Grid.Row>\n      </Grid>\n    </Form>\n  )\n}\n\nexport default PatientEdit\n","import React, { useEffect } from 'react'\nimport { Header, Icon, Segment, Table } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { actions, selectors } from './_redux'\n\nimport { selectors as patientSelectors } from '../patients/_redux'\n\nconst AppointmentList = () => {\n  const dispatch = useDispatch()\n  const selectedPatient = useSelector(patientSelectors.current)\n  const appointments = useSelector(selectors.selectAll)\n\n  useEffect(() => {\n    dispatch(actions.list({ patientId: selectedPatient?._id }))\n  }, [dispatch, selectedPatient])\n\n  if (!appointments.length) {\n    return (\n      <Segment placeholder>\n        <Header icon>\n          <Icon name=\"user md\" />\n          Jeszcze nie zarejestrowano żadnej wizyty\n        </Header>\n      </Segment>\n    )\n  }\n\n  return (\n    <>\n      {!selectedPatient && (\n        <Header as=\"h2\">\n          <Icon name=\"group\" />\n          <Header.Content>\n            Wizyty\n            <Header.Subheader>{appointments.length} rekordów</Header.Subheader>\n          </Header.Content>\n        </Header>\n      )}\n      <Table data-cy=\"appointment-list\" padded selectable fixed>\n        <Table.Header>\n          <Table.Row>\n            {!selectedPatient && <Table.HeaderCell>Pacjent</Table.HeaderCell>}\n            <Table.HeaderCell width={5}>Data i godzina wizyty</Table.HeaderCell>\n            <Table.HeaderCell width={7}>Inne informacje</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {appointments.map(\n            ({ _id, interview, visitDate, patient }) => (\n              <Table.Row\n                onClick={() => {\n                  dispatch(actions.details(_id))\n                }}\n                key={_id}\n              >\n                {!selectedPatient && (\n                  <Table.Cell verticalAlign=\"top\">\n                    {patient && `${patient.name} ${patient.surname}`}\n                  </Table.Cell>\n                )}\n                <Table.Cell verticalAlign=\"top\">\n                  {visitDate}\n                </Table.Cell>\n                <Table.Cell>{interview}</Table.Cell>\n              </Table.Row>\n            )\n          )}\n        </Table.Body>\n      </Table>\n    </>\n  )\n}\n\nexport default AppointmentList\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Grid, Form, Button, Icon, Header } from 'semantic-ui-react'\nimport { DateTimeInput } from 'semantic-ui-calendar-react'\nimport moment from 'moment'\n\nimport { selectors, actions } from './_redux'\nimport { actions as patientActions, selectors as patientSelectors } from '../patients/_redux'\n\nconst AppointmentEdit = () => {\n  const dispatch = useDispatch()\n  const appointment = useSelector(selectors.current)\n  const patient = useSelector(patientSelectors.current)\n  const dateFormat = 'YYYY-MM-DD @ HH:mm'\n\n  let initValues = {\n    patientId: patient._id,\n    interview: '',\n    visitDate: moment().format(dateFormat)\n  }\n  let _id = ''\n  let _rev = ''\n\n  if (appointment !== undefined) {\n    ({ _id, _rev, ...initValues } = appointment)\n  }\n\n  const [fields, setFields] = useState({\n    values: initValues\n  })\n\n  const handleChange = async (field, value) => {\n    setFields(state => ({\n      values: { ...state.values, [field]: value }\n    }))\n  }\n\n  const handleSubmit = async () =>\n    dispatch(\n      appointment === undefined\n        ? actions.add(fields.values)\n        : actions.update({ _id, _rev, ...fields.values })\n    )\n\n  return (\n    <>\n      {patient && (\n        <Header as=\"h2\">\n          <Icon name=\"user circle\" />\n          <Header.Content>\n            {patient.name} {patient.surname}\n            <Header.Subheader>Nowa wizyta</Header.Subheader>\n          </Header.Content>\n        </Header>\n      )}\n      <Form>\n        <Form.Field>\n          <label>Data wizyty</label>\n          <DateTimeInput\n            duration={0}\n            name=\"visitDate\"\n            closable\n            closeOnMouseLeave\n            dateFormat={dateFormat}\n            localization=\"pl\"\n            placeholder=\"Data wizyty\"\n            value={fields.values.visitDate}\n            iconPosition=\"right\"\n            popupPosition=\"bottom right\"\n            onChange={(e, { value }) => {\n              if (value) {\n                const date = moment(value, 'YYYY-MM-DD @ HH:mm')\n                if (date.isValid()) {\n                  handleChange('visitDate', date.format(dateFormat))\n                } else {\n                  handleChange('visitDate', '')\n                }\n              }\n            }}\n          />\n        </Form.Field>\n        <Form.TextArea\n          autoFocus\n          data-cy=\"description\"\n          value={fields.values.interview}\n          label=\"Inne informacje\"\n          placeholder=\"Inne informacje\"\n          onChange={(_, data) => handleChange('interview', `${data.value}`)}\n        />\n        <Grid>\n          <Grid.Row columns=\"2\">\n            <Grid.Column>\n              <Button.Group>\n                <Button data-cy=\"appointment-save-button\" onClick={handleSubmit} positive>\n                  Zapisz\n                </Button>\n                <Button.Or text=\"lub\" />\n                <Button data-cy=\"appointment-cancel\" onClick={() => dispatch(patientActions.details(patient._id))}>\n                  Anuluj\n                </Button>\n              </Button.Group>\n            </Grid.Column>\n            <Grid.Column textAlign=\"right\">\n              {appointment && (\n                <Button\n                  negative\n                  onClick={() => {\n                    dispatch(actions.remove(appointment))\n                  }}\n                >\n                  <Icon name=\"trash\" /> Usuń\n                </Button>\n              )}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Form>\n    </>\n  )\n}\n\nexport default AppointmentEdit\n","import {\n  createSlice,\n  createAsyncThunk\n} from '@reduxjs/toolkit'\nimport clone from 'lodash/clone'\nimport PouchDb from 'pouchdb'\n\nconst db = new PouchDb('settings')\n\nconst initialState = {\n  all: {\n    serverHost: 'localhost',\n    serverPort: 'localhost:8080'\n  },\n  loading: false\n}\n\nconst list = createAsyncThunk(\n  'settings/list',\n  async () => {\n    const response = clone(initialState.all)\n    for (const name of Object.keys(initialState.all)) {\n      const { docs } = await db.find({ selector: { name } })\n      if (docs.length === 1) {\n        response[name] = docs[0].value\n      }\n    }\n    return response\n  }\n)\n\nconst update = createAsyncThunk(\n  'settings/update',\n  async ({ name, value }) => {\n    const { docs } = await db.find({ selector: { name } })\n    if (docs.length) {\n      await db.put({ ...docs[0], value })\n    } else {\n      await db.post({ name, value })\n    }\n    return { name, value }\n  }\n)\n\nconst slice = createSlice({\n  name: 'settings',\n  initialState,\n  extraReducers: {\n    [list.fulfilled]: (state, { payload }) => {\n      state.all = payload\n    },\n    [update.fulfilled]: (state, { payload }) => {\n      state.all[payload.name] = payload.value\n    },\n    [list.rejected]: (state, data) => {\n      console.error(data)\n    }\n  }\n})\n\nexport const actions = { list, update }\n\nexport const selectors = {\n  all: state => state.settings.all,\n  loading: state => state.settings.loading\n}\n\nexport default slice.reducer\n","import { actions } from '../features/flash/_redux'\n\nlet nextId = 1\nconst duration = 3000\n\nconst messageMap = {\n  fulfilled: {\n    type: 'success',\n    add: 'Nowy wpis został zapisany',\n    update: 'Zmiany zostały zapisane',\n    remove: 'Wpis został usunięty',\n    patients: {\n      add: 'Dane nowego pacjenta zostały zapisane'\n    }\n  },\n  rejected: {\n    type: 'error',\n    add: 'Nie udało się zapisać danych',\n    update: 'Nie udało się zapisać zmian',\n    remove: 'Nie udało się usunąć wpisu',\n    list: 'Nie udało się pobrać listy'\n  }\n}\n\nconst flash = ({ dispatch }) => next => async action => {\n  const matches = action.type.match(/^([a-z]+)\\/([a-z]+)\\/([a-z]+)$/)\n\n  if (!matches) {\n    return next(action)\n  }\n\n  const add = (text, type = 'success') => {\n    dispatch(actions.add({ id: nextId, type, text }))\n    setTimeout(id => {\n      dispatch(actions.remove(id))\n    }, duration, nextId)\n    nextId++\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  const [_, module, verb, result] = matches\n\n  if (messageMap[result]?.[module]?.[verb]) {\n    add(messageMap[result][module][verb], messageMap[result].type)\n  } else if (messageMap[result]?.[verb]) {\n    add(messageMap[result][verb], messageMap[result].type)\n  }\n\n  return next(action)\n}\n\nexport default flash\n\nexport const add = (dispatch, text, type = 'success') => {\n  dispatch(actions.add({ id: nextId, type, text }))\n  setTimeout(id => {\n    dispatch(actions.remove(id))\n  }, duration, nextId)\n  nextId++\n}\n","import React, { useState } from 'react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport { ScannerController } from '@dev3dbody/scanner-controller'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { selectors } from '../settings/_redux'\nimport { actions } from './_redux'\nimport { add as flash } from '../../middlewares/flash'\nimport isArray from 'lodash/isArray'\n\nconst ScanButton = ({ appointment, patient, onScanComplete }) => {\n  const buttonLabels = {\n    checking: 'Łączenie ze skanerem...',\n    ready: 'Nowe badanie',\n    error: 'Błąd skanowania',\n    'connection-error': 'Brak połączenia',\n    busy: 'Skanuję...'\n  }\n  const [status, setStatus] = useState('checking')\n  const { serverHost, serverPort } = useSelector(selectors.all)\n  const dispatch = useDispatch()\n  const scannerController = new ScannerController(serverHost, serverPort, false)\n\n  scannerController.getStatus().then(result => {\n    if (result.arduino_ready) {\n      setStatus('ready')\n    }\n  }, errors => {\n    isArray(errors) && errors.forEach(error => {\n      flash(dispatch, 'Błąd połączenia ze skanerem: ' + error.msg, 'error')\n      setStatus('connection-error')\n    })\n  })\n\n  return (\n    <Button\n      disabled={status === 'checking' || status === 'busy'}\n      primary={status === 'ready' || status === 'busy'}\n      negative={status === 'connection-error'}\n      onClick={() => {\n        setStatus('busy')\n        const scanId = ScannerController.prepareStandardScanId(patient.surname + patient.name)\n        scannerController.scan(scanId).then(async mesh => {\n          setStatus('busy')\n          const { payload: { _id } } = await dispatch(\n            actions.add({\n              patientId: patient._id,\n              appointmentId: appointment._id,\n              mesh\n            })\n          )\n          onScanComplete(_id)\n        }, errors => {\n          setStatus('error')\n          isArray(errors) && errors.forEach(error => {\n            flash(dispatch, 'Błąd skanowania: ' + error.msg, 'warning')\n          })\n        })\n      }}\n    >\n      <Icon name=\"video camera\" />\n      {buttonLabels[status]}\n    </Button>\n  )\n}\n\nexport default ScanButton\n","import React, { useEffect } from 'react'\nimport { Button, Header, Icon, Segment, Table } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport truncate from 'lodash/truncate'\n\nimport { actions, selectors } from './_redux'\nimport { selectors as patientSelectors } from '../patients/_redux'\nimport { selectors as appointmentSelectors } from '../appointments/_redux'\nimport { actions as compareActions, selectors as compareSelectors } from '../compare/_redux'\n\nconst ScanList = () => {\n  const dispatch = useDispatch()\n  const selectedPatient = useSelector(patientSelectors.current)\n  const selectedAppointment = useSelector(appointmentSelectors.current)\n  const scans = useSelector(selectors.selectAll)\n  const comparedScans = useSelector(compareSelectors.selectAll)\n\n  useEffect(() => {\n    dispatch(actions.list({ patientId: selectedPatient._id, appointmentId: selectedAppointment?._id }))\n  }, [dispatch, selectedPatient, selectedAppointment])\n\n  if (!scans.length) {\n    return (\n      <Segment placeholder>\n        <Header icon>\n          <Icon name='user md' />\n          Jeszcze nie zarejestrowano żadnego badania\n        </Header>\n      </Segment>\n    )\n  }\n\n  return (\n    <>\n      {!selectedPatient && (\n        <Header as='h2'>\n          <Icon name='group' />\n          <Header.Content>\n            Badania\n            <Header.Subheader>{scans.length} rekordów</Header.Subheader>\n          </Header.Content>\n        </Header>\n      )}\n      <Table data-cy='appointment-list' padded selectable fixed>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Nr badania</Table.HeaderCell>\n            <Table.HeaderCell>Data i godzina</Table.HeaderCell>\n            <Table.HeaderCell>Notatki</Table.HeaderCell>\n            <Table.HeaderCell>Porównanie</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {scans.map(({ _id, date, comment, patientId, appointmentId, order }) => {\n            const isCompared = !!comparedScans.find(id => id === _id)\n            return (\n              <Table.Row\n                onClick={() => {\n                  dispatch(actions.details(_id))\n                }}\n                key={_id}\n              >\n                <Table.Cell>{order}</Table.Cell>\n                <Table.Cell>{date}</Table.Cell>\n                <Table.Cell>{truncate(comment, { length: 32, separator: '...' })}</Table.Cell>\n                <Table.Cell className=''>\n                  {isCompared ? (\n                    <Button\n                      negative\n                      onClick={e => {\n                        e.stopPropagation()\n                        dispatch(compareActions.remove(_id))\n                      }}\n                    >\n                      <Icon name='trash' />\n                      Usuń z porównania\n                    </Button>\n                  ) : (\n                    <Button\n                      positive\n                      onClick={e => {\n                        e.stopPropagation()\n                        dispatch(compareActions.add(_id))\n                      }}\n                    >\n                      <Icon name='plus circle' />\n                      Dodaj do porównania\n                    </Button>\n                  )}\n                </Table.Cell>\n              </Table.Row>\n            )\n          })}\n        </Table.Body>\n      </Table>\n    </>\n  )\n}\n\nexport default ScanList\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Dropdown, Header, Icon, Segment } from 'semantic-ui-react'\nimport { actions, selectors as appointmentSelectors } from './_redux'\nimport { actions as scanAcions } from '../scans/_redux'\nimport { actions as patientActions, selectors as patientSelectors } from '../patients/_redux'\nimport ScanButton from '../scans/button'\nimport ScanList from '../scans/list'\n\nconst AppointmentDetails = () => {\n  const patient = useSelector(patientSelectors.current)\n  const appointment = useSelector(appointmentSelectors.current)\n  const dispatch = useDispatch()\n\n  if (!patient || !appointment) {\n    return null\n  }\n\n  return (\n    <>\n      <Button.Group floated='right'>\n        <ScanButton\n          onScanComplete={scanId => {\n            dispatch(scanAcions.details(scanId))\n          }} appointment={appointment} patient={patient}\n        />\n        <Dropdown\n          data-cy='dropdown'\n          onChange={() => {\n            dispatch(actions.editAppointment(appointment._id))\n          }}\n          className='button icon'\n          options={[\n            { key: 'edit', icon: 'edit', text: 'Modyfikuj', value: 'edit' }\n          ]}\n          trigger={<></>}\n        />\n      </Button.Group>\n      <Header as='h2'>\n        <Icon name='user circle' />\n        <Header.Content data-cy='appointment-details'>\n          Wizyta {appointment.visitDate}\n          <Header.Subheader>\n            {patient.name} {patient.surname}\n          </Header.Subheader>\n        </Header.Content>\n      </Header>\n      <Segment data-cy='appointment-description'>\n        {appointment.interview.split('\\n').map((line, key) => (\n          <p key={key}>{line}</p>\n        ))}\n      </Segment>\n      <ScanList />\n      <Button data-cy='navigate-back' onClick={() => dispatch(patientActions.details(patient._id))} basic>\n        <Icon name='arrow left' /> wróć do szczegółów pacjenta\n      </Button>\n    </>\n  )\n}\n\nexport default AppointmentDetails\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Button, Form } from 'semantic-ui-react'\nimport {\n  actions\n} from './_redux'\n\nconst ScanComment = ({ scan }) => {\n  const dispatch = useDispatch()\n  const [fields, setFields] = useState({\n    values: scan\n  })\n  const [changed, setChanged] = useState(false)\n\n  const handleChange = async (field, value) => {\n    setFields(state => ({\n      values: { ...state.values, [field]: value }\n    }))\n  }\n\n  useEffect(() => {\n    if (fields.values.comment !== scan.comment) {\n      setChanged(true)\n    }\n  }, [fields])\n\n  const handleSubmit = () => {\n    dispatch(\n      actions.update(fields.values)\n    )\n    setChanged(false)\n  }\n\n  return (\n    <Form>\n      <Form.TextArea\n        data-cy='comment'\n        value={fields.values.comment}\n        label=''\n        placeholder='Zapisz notatkę do badania'\n        onChange={(__, data) => handleChange('comment', data.value)}\n      />\n      {changed &&\n      (\n        <Button.Group>\n          <Button onClick={handleSubmit} positive>\n            Zapisz\n          </Button>\n          <Button.Or text='lub' />\n          <Button onClick={() => {\n            setFields({ values: { ...fields.values, comment: scan.comment } })\n            setChanged(false)\n          }}\n          >\n            Anuluj\n          </Button>\n        </Button.Group>\n      )}\n    </Form>\n  )\n}\n\nexport default ScanComment\n","import React from 'react'\nimport { Button, Container, Dropdown, Header, Icon, Divider } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport ScanComment from './comment'\nimport ScanView from './view'\n\nimport { actions as appointmentActions, selectors as appointmentSelectors } from '../appointments/_redux'\nimport { selectors as patientSelectors } from '../patients/_redux'\nimport { actions, selectors } from './_redux'\nimport { actions as compareActions } from '../compare/_redux'\n\nconst StanDetails = () => {\n  const scan = useSelector(selectors.current)\n  const appointment = useSelector(appointmentSelectors.current)\n  const patient = useSelector(patientSelectors.current)\n  const isCompared = false // TODO: useSelector(compareSelectors.isCompared)\n  const dispatch = useDispatch()\n\n  if (!scan || !patient || !appointment) {\n    return null\n  }\n\n  return (\n    <Container>\n      <Button.Group floated='right'>\n        <Button\n          positive={!isCompared}\n          negative={isCompared}\n          onClick={() => {\n            dispatch(\n              isCompared ? compareActions.remove(scan._id) : compareActions.add(scan._id)\n            )\n          }}\n        >\n          <Icon name={isCompared ? 'trash' : 'plus circle'} />\n          {isCompared ? 'Usuń z porównania' : 'Dodaj do porównania'}\n        </Button>\n        <Dropdown\n          onChange={(e, { value }) => {\n            const exportLink = document.createElement('a')\n            switch (value) {\n              case 'remove':\n                dispatch(actions.remove(scan))\n                dispatch(appointmentActions.details(appointment._id))\n                break\n              case 'export':\n                exportLink.href = 'data:application/octet-stream;base64,' + scan._attachments['scan.ply'].data\n                exportLink.download = `badanie_${scan.order}.ply`\n                exportLink.click()\n                break\n            }\n          }}\n          className='button icon'\n          options={[\n            { keg: 'export', icon: 'file', text: 'Zapisz do pliku', value: 'export' },\n            { key: 'remove', icon: 'delete', text: 'Usuń', value: 'remove' }\n          ]}\n          trigger={<></>}\n        />\n      </Button.Group>\n      <Header as='h2'>\n        <Icon name='user circle' />\n        <Header.Content>\n          Badanie nr {scan.order}\n          <Header.Subheader>\n            {patient.name} {patient.surname} z dnia {scan.date}\n          </Header.Subheader>\n        </Header.Content>\n      </Header>\n      <ScanView scan={scan} />\n      <Divider section />\n      <ScanComment scan={scan} />\n      <Divider section />\n      <Button\n        onClick={() => dispatch(appointmentActions.details(appointment._id))}\n        basic\n      >\n        <Icon name='arrow left' /> wróć do wizyty\n      </Button>\n    </Container>\n  )\n}\n\nexport default StanDetails\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  Container,\n  Grid,\n  Button,\n  Dropdown,\n  Header,\n  Icon,\n  Segment\n} from 'semantic-ui-react'\nimport { actions, selectors } from './_redux'\nimport { actions as appointmentActions } from '../appointments/_redux'\nimport { AppointmentList } from '../appointments'\nimport { ScanView } from '../scans'\n\nconst PatientDetails = () => {\n  const patient = useSelector(selectors.current)\n  const dispatch = useDispatch()\n\n  if (!patient) {\n    return null\n  }\n\n  return (\n    <Container>\n      <Grid columns='equal'>\n        <Grid.Row>\n          <Grid.Column>\n            <Header as='h2'>\n              <Icon name='user circle' />\n              <Header.Content data-cy='patient-header-content'>\n                {patient.name} {patient.surname}\n                <Header.Subheader>Szczegóły Pacjenta</Header.Subheader>\n              </Header.Content>\n            </Header>\n          </Grid.Column>\n          <Grid.Column>\n            <Button.Group\n              primary\n              floated='right'\n              onClick={() => dispatch(appointmentActions.newAppointment())}\n            >\n              <Button primary data-cy='new-appointment'>\n                <Icon name='add to calendar' />\n                Nowa wizyta\n              </Button>\n              <Dropdown\n                floating\n                data-cy='dropdown-button-icon'\n                onChange={() => {\n                  dispatch(actions.editPatient(patient._id))\n                }}\n                className='button icon'\n                options={[\n                  {\n                    key: 'edit',\n                    icon: 'edit',\n                    text: 'Modyfikuj',\n                    value: 'edit'\n                  }\n                ]}\n                trigger={<></>}\n              />\n            </Button.Group>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Grid divided style={{ paddingTop: '0.5em' }}>\n        <Grid.Row>\n          <Grid.Column width={7} style={{ padding: '0 2em 3em 0' }}>\n            <p>\n              <strong>Data urodzenia: </strong>\n              {patient.birthDate}\n            </p>\n            <p>\n              <strong>Ostatnia wizyta: </strong> {patient.lastAppointment ? patient.lastAppointment.visitDate : '(brak)'}\n            </p>\n            <Header as='h4'>Inne informacje:</Header>\n            <Segment>\n              {patient.comment.split('\\n').map((line, key) => (\n                <p key={key}>{line}</p>\n              ))}\n            </Segment>\n            <Header as='h3' style={{ margin: '2em 0 1em 0' }}>\n              Ostatnie wizyty\n            </Header>\n            <AppointmentList />\n          </Grid.Column>\n          <Grid.Column width={9} style={{ padding: '0 0 3em 2em' }}>\n            <Header as='h4'>Ostatnie badanie - {patient.lastScan ? patient.lastScan.date : '(brak)'}</Header>\n            {patient.lastScan &&\n              <Segment>\n                <ScanView scan={patient.lastScan} />\n              </Segment>\n            }\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n      <Button\n        data-cy='back-button'\n        onClick={() => dispatch(actions.list())}\n        basic\n      >\n        <Icon name='arrow left' /> Wróć\n      </Button>\n    </Container>\n  )\n}\n\nexport default PatientDetails\n","import React, { useEffect, useState } from 'react'\nimport { Button, Form, Header, Icon } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actions, selectors } from './_redux'\n\nconst SettingsEdit = ({ serverHost, serverPort }) => {\n  const dispatch = useDispatch()\n  const [fields, setFields] = useState({\n    values: {\n      serverHost,\n      serverPort\n    }\n  })\n\n  useEffect(() => {\n    setFields({ values: { serverHost, serverPort } })\n  }, [serverHost, serverPort])\n\n  const handleChange = async (field, value) => {\n    setFields(state => ({\n      values: { ...state.values, [field]: value }\n    }))\n  }\n  return (\n    <Form>\n      <Form.Input\n        data-cy=\"setting-value\"\n        value={fields.values.serverHost}\n        fluid\n        label=\"Adres serwera obsługującego skaner\"\n        onChange={(__, { value }) => handleChange('serverHost', value)}\n      />\n      <Form.Input\n        data-cy=\"setting-value\"\n        value={fields.values.serverPort}\n        fluid\n        label=\"Port\"\n        onChange={(__, { value }) => handleChange('serverPort', value)}\n      />\n      <Button\n        data-cy=\"setting-save\"\n        onClick={() => {\n          dispatch(\n            actions.update({ name: 'serverHost', value: fields.values.serverHost })\n          )\n          dispatch(\n            actions.update({ name: 'serverPort', value: fields.values.serverPort })\n          )\n        }}\n        positive\n      >\n        Zapisz\n      </Button>\n    </Form>\n  )\n}\n\nconst Settings = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(actions.list())\n  }, [dispatch])\n\n  const { serverHost, serverPort } = useSelector(selectors.all)\n\n  return (\n    <>\n      <Header data-cy=\"settings-list\" as=\"h2\">\n        <Icon name=\"group\" />\n        <Header.Content>\n          Ustawienia\n          <Header.Subheader>Konfiguracja systemu</Header.Subheader>\n        </Header.Content>\n      </Header>\n      {serverHost && <SettingsEdit {...{ serverHost, serverPort }} />}\n    </>\n  )\n}\n\nexport default Settings\n","import React, { useEffect } from 'react'\n\nimport Flash from './features/flash'\nimport { Navigation, NavigationSwitch } from './features/navigation'\nimport { PatientDetails, PatientEdit, PatientList } from './features/patients'\nimport { AppointmentDetails, AppointmentEdit, AppointmentList } from './features/appointments'\nimport { ScanDetails } from './features/scans'\nimport Settings from './features/settings'\nimport { useDispatch } from 'react-redux'\nimport { actions } from './features/settings/_redux'\nimport { ComparePage } from './features/compare'\n\nconst App = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(actions.list())\n  }, [dispatch])\n  return (\n    <>\n      <Navigation />\n      <div style={{ margin: '2em' }}>\n        <NavigationSwitch map={{\n          ADD_PATIENT: <PatientEdit />,\n          ADD_APPOINTMENT: <AppointmentEdit />,\n          PATIENT_DETAILS: <PatientDetails />,\n          APPOINTMENT_DETAILS: <AppointmentDetails />,\n          SCAN_DETAILS: <ScanDetails />,\n          COMPARE: <ComparePage />,\n          PATIENT: <PatientList />,\n          APPOINTMENT: <AppointmentList />,\n          SETTINGS: <Settings />,\n          _default: <p>_default</p>\n        }}\n        />\n      </div>\n      <Flash />\n    </>\n  )\n}\n\nexport default App\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport navigation from './features/navigation/_redux'\nimport patients from './features/patients/_redux'\nimport appointments from './features/appointments/_redux'\nimport settings from './features/settings/_redux'\nimport flash from './features/flash/_redux'\nimport scans from './features/scans/_redux'\nimport compare from './features/compare/_redux'\nimport flashMiddleware from './middlewares/flash'\n\nexport default configureStore({\n  reducer: {\n    navigation,\n    patients,\n    appointments,\n    settings,\n    flash,\n    scans,\n    compare\n  },\n  middleware: [...getDefaultMiddleware(), flashMiddleware]\n})\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App'\nimport store from './store'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport PouchDb from 'pouchdb'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n// expose store when run in Cypress\nif (window.Cypress) {\n  window.resetApp = async function () {\n    const patients = new PouchDb('patients')\n    await patients.destroy()\n\n    const appointments = new PouchDb('appointments')\n    await appointments.destroy()\n\n    const settings = new PouchDb('settings')\n    await settings.destroy()\n  }\n}\n"],"sourceRoot":""}